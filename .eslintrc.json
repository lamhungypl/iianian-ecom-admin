{
  "root": true,
  "overrides": [
    {
      "files": ["*.ts"],
      "parserOptions": {
        "project": ["tsconfig.*?.json", "e2e/tsconfig.json"],
        "createDefaultProgram": true
      },
      "extends": [
        "plugin:@angular-eslint/recommended",
        "airbnb-typescript/base",

        "prettier/@typescript-eslint",
        "plugin:prettier/recommended"
      ],
      "rules": {
        /**
         * Any TypeScript related rules you wish to use/reconfigure over and above the
         * recommended set provided by the @angular-eslint project would go here.
         *
         * There are some examples below from the @angular-eslint plugin and ESLint core:
         */
        "@angular-eslint/directive-selector": ["error", { "type": "attribute", "prefix": "app", "style": "camelCase" }],
        "@angular-eslint/component-selector": ["error", { "type": "element", "prefix": "app", "style": "kebab-case" }],
        "import/no-unresolved": "off",
        "import/prefer-default-export": "off",
        "class-methods-use-this": "off",
        "lines-between-class-members": "off",
        "@typescript-eslint/unbound-method": [
          "error",
          {
            "ignoreStatic": true
          }
        ]
      }
    },

    {
      "files": ["*.component.html"],
      "extends": ["plugin:@angular-eslint/template/recommended"],
      "rules": {
        "max-len": ["error", { "code": 140 }]
      }
    },

    {
      "files": ["*.component.ts"],
      "extends": ["plugin:@angular-eslint/template/process-inline-templates"]
    },
    {
      "files": ["src/**/*.spec.ts", "src/**/*.d.ts"],
      "parserOptions": {
        "project": "./src/tsconfig.spec.json"
      },
      // Jasmine rules
      "extends": ["plugin:jasmine/recommended"],
      // Plugin to run Jasmine rules
      "plugins": ["jasmine"],
      "env": { "jasmine": true },
      // Turn off "no-unused-vars" rule
      "rules": {
        "@typescript-eslint/no-unused-vars": "off"
      }
    }
  ]
}
